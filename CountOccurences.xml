<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

typedef int[0,6] size_t;
typedef int[0,5] array_size_t;

const size_t size = 6;
size_t globalArr[size];
const size_t numToCheck = 5; 
size_t finalResult;


size_t count(){
    int i;
    size_t result = 0;
    
    /*
        lOOPAAL invariant : forall int i, globalArr[] &gt; i &gt;= 0 =&gt; 
    */
    for(i = 0; i &lt; size; i++)
       if (globalArr[i] == numToCheck)
            result++;

    return result;
}
</declaration>
	<template>
		<name>zeno</name>
		<location id="id0" x="0" y="0">
			<urgent/>
		</location>
		<init ref="id0"/>
	</template>
	<template>
		<name x="5" y="5">CountFunc</name>
		<declaration>// Place local declarations here.
int arrayLocationPointer = 0;
int fillCounter = 0;
int rand = -5;
size_t result = 0;

void incrementPointer(){
    arrayLocationPointer = arrayLocationPointer + 1;
}


void checkValue(){
    if(globalArr[arrayLocationPointer] == numToCheck){
        result++;
    }
}</declaration>
		<location id="id1" x="-935" y="-620">
			<name x="-960" y="-654">Init</name>
		</location>
		<location id="id2" x="-799" y="-493">
			<name x="-850" y="-519">Loop</name>
		</location>
		<location id="id3" x="-799" y="-323">
			<name x="-858" y="-357">Return</name>
		</location>
		<location id="id4" x="-799" y="-620">
			<name x="-782" y="-629">FillArray</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="-824" y="-739">e: size_t</label>
			<label kind="guard" x="-824" y="-756">fillCounter &lt; size</label>
			<label kind="assignment" x="-824" y="-722">globalArr[fillCounter] = e, fillCounter++</label>
			<nail x="-833" y="-697"/>
			<nail x="-756" y="-697"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-790" y="-578">fillCounter == size</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-790" y="-425">arrayLocationPointer == size</label>
			<label kind="assignment" x="-790" y="-399">finalResult = result</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-620" y="-527">arrayLocationPointer &lt; size</label>
			<label kind="assignment" x="-620" y="-510">checkValue(), incrementPointer()</label>
			<nail x="-629" y="-552"/>
			<nail x="-629" y="-433"/>
		</transition>
	</template>
	<system>system CountFunc, zeno;
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt;(sum (e : array_size_t) globalArr[e] == numToCheck) == finalResult</formula>
			<comment>The query asks if summarizing the elements in the global array for a specific number, will always yield the final result</comment>
		</query>
		<query>
			<formula>(CountFunc.Loop &amp;&amp; (forall (e : array_size_t) globalArr[e] != numToCheck)) --&gt; (CountFunc.Return &amp;&amp; finalResult == 0)</formula>
			<comment>If the chosen number to search for is not present in the array then the result of the CountFunc is 0.</comment>
		</query>
		<query>
			<formula>A&lt;&gt; CountFunc.Return &amp;&amp; count() == CountFunc.result</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
