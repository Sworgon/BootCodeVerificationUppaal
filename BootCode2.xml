<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Når man tænder, er hele flash read-only og locked.
// Når man har verificeret noget, "åbner" man en region gennem PMP, så det kan eksekveres.

const int MemoryMaxIndex = 100;
const int NumberOfFlashBanks = 2;



typedef struct{
    int identifier;
    int rom_ext_slot[NumberOfFlashBanks]; // Address of Flash Bank
    
    //what to do if all ROM Ext are invalid
    //void (*fail) ();    
    int fail_function_address;

    //what to do if the ROM Ext unexpectedly returns
    //void (*fail_rom_ext_terminated) (rom_ext_manifest_t);   
    int rom_ext_failure_function_address;
} boot_policy_t;

typedef struct {
    int key[10];
} pub_key_t;

typedef struct {
    int identifier;
    int entryPoint; //address in memory
    int signature;
    pub_key_t pub_signature_key;
    int image_code[10];
} rom_ext_manifest_t;

typedef struct {
    int size;
    rom_ext_manifest_t rom_exts_mfs[NumberOfFlashBanks];
} rom_exts_manifests_t;
typedef struct{
    int startAddress;
    int endAddress;
    bool read;
    bool write;
    bool execute;
    bool locked;
} PmpRegion_t;

PmpRegion_t PmpRegions[16];

int GlobalMemory[MemoryMaxIndex];
boot_policy_t GlobalBootPolicy;
rom_exts_manifests_t GlobalRomExtsManifests;
pub_key_t GlobalPublicKey;
bool GlobalBool;
int GlobalSignature;


chan PowerOn, StartRomStage;

chan ReadMemory[MemoryMaxIndex][MemoryMaxIndex];
chan WriteMemory[MemoryMaxIndex][MemoryMaxIndex];
chan ExecuteMemory[MemoryMaxIndex][MemoryMaxIndex];

chan REMTTCall, // Rom Ext Manifests To Try
     REMTTReturn;

chan CheckPublicKeyValidCall,
     PubKeyNotValid,
     PubKeyValid;

chan CheckSignature,
     SignatureValid,
     SignatureNotValid;

chan RomExtStart[MemoryMaxIndex];

void clearGlobalMemory(){
    int i;
    for(i = 0; i &lt; MemoryMaxIndex; i++)
        GlobalMemory[i] = 0;
}

void clearGlobalBootPolicy(){
    int i;
    GlobalBootPolicy.identifier = 0;
    for(i = 0; i &lt; NumberOfFlashBanks; i++)
        GlobalBootPolicy.rom_ext_slot[i] = 0; 
    GlobalBootPolicy.fail_function_address = 0;  
    GlobalBootPolicy.rom_ext_failure_function_address = 0;
}

void clearGlobalRomExtsManifests(){
    int i, j;
    GlobalRomExtsManifests.size = 0;
    for(i = 0; i &lt; NumberOfFlashBanks; i++){
        GlobalRomExtsManifests.rom_exts_mfs[i].identifier = 0;
        GlobalRomExtsManifests.rom_exts_mfs[i].entryPoint = 0;
        GlobalRomExtsManifests.rom_exts_mfs[i].signature = 0;
        for(j = 0; j &lt; 10; j++){
            GlobalRomExtsManifests.rom_exts_mfs[i].pub_signature_key.key[j] = 0;
            GlobalRomExtsManifests.rom_exts_mfs[i].image_code[j] = 0;
        }
    }
}
</declaration>
	<template>
		<name>SystemReset</name>
		<location id="id0" x="178" y="-51">
		</location>
		<location id="id1" x="51" y="-51">
		</location>
		<location id="id2" x="-51" y="-51">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="59" y="-76">StartRomStage!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-34" y="-76">PowerOn!</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Memory</name>
		<declaration>int memory[MemoryMaxIndex];
// 0-20 ROM
// 21-30 Flash Info
// 31-65 Flash Bank 0
// 66-99 Flash Bank 1


void initializeMemory(){
    int i;
    for(i = 0; i &lt; MemoryMaxIndex; i++)
        memory[i] = i;
}

void initializePmp(){
    PmpRegions[15].startAddress = 0;
    PmpRegions[15].endAddress = MemoryMaxIndex;
    PmpRegions[15].write = false;
    PmpRegions[15].read = true;
    PmpRegions[15].execute = false;
    PmpRegions[15].locked = true;
}

bool canRead(int startIndex, int endIndex){
    return true;
}

bool canWrite(int startIndex, int endIndex){
    return true;
}

bool canExecute(int startIndex, int endIndex){
    return true;
}

void readMemory(int startIndex, int endIndex){
    int i;
    for(i = 0; i &lt;= endIndex - startIndex; i++){
        GlobalMemory[i] = memory[i + startIndex];
    }
}


</declaration>
		<location id="id3" x="-527" y="-459">
		</location>
		<location id="id4" x="-527" y="-603">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-467" y="-484">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-467" y="-450">canExecute(s,e)</label>
			<label kind="synchronisation" x="-467" y="-433">ExecuteMemory[s][e]?</label>
			<nail x="-476" y="-442"/>
			<nail x="-476" y="-476"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-612" y="-408">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-612" y="-374">canWrite(s,e)</label>
			<label kind="synchronisation" x="-612" y="-357">WriteMemory[s][e]?</label>
			<nail x="-544" y="-408"/>
			<nail x="-510" y="-408"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-756" y="-510">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-756" y="-476">canRead(s, e)</label>
			<label kind="synchronisation" x="-756" y="-459">ReadMemory[s][e]?</label>
			<label kind="assignment" x="-756" y="-442">readMemory(s,e)</label>
			<nail x="-578" y="-476"/>
			<nail x="-578" y="-442"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-637" y="-586">PowerOn?</label>
			<label kind="assignment" x="-637" y="-569">initializePmp(),
initializeMemory()</label>
		</transition>
	</template>
	<template>
		<name>ROMStage</name>
		<declaration>boot_policy_t bootPolicy;
rom_exts_manifests_t romExtsManifests;
rom_ext_manifest_t currentManifest;
int loopIndex = 0;
pub_key_t key;
int entryPoint;

void readBootPolicy(){
    bootPolicy.identifier = GlobalMemory[0];
    bootPolicy.rom_ext_slot[0] = 31; // Address of flash bank 0.
    bootPolicy.rom_ext_slot[1] = 66; // Address of flash bank 1.
    bootPolicy.fail_function_address = GlobalMemory[1];
    bootPolicy.rom_ext_failure_function_address = GlobalMemory[2];
}

bool checkRomExtManifest(){
    return currentManifest.identifier != 0;
}

void readPublicKey(){
    key = currentManifest.pub_signature_key;
}

void pmpUnlockRomExt(){
    PmpRegions[0].startAddress = bootPolicy.rom_ext_slot[loopIndex] + 3; // Det er den sidste del af manifestet (31-35)
    PmpRegions[0].endAddress = bootPolicy.rom_ext_slot[loopIndex] + 4;
    PmpRegions[0].locked = true;
    PmpRegions[0].read = true;
    PmpRegions[0].execute = true;
    PmpRegions[0].write = false;    
}

void finalJumpToRomExt(){
    entryPoint = 34;
}

</declaration>
		<location id="id5" x="238" y="-255">
		</location>
		<location id="id6" x="237" y="-187">
		</location>
		<location id="id7" x="-85" y="-187">
		</location>
		<location id="id8" x="-85" y="-357">
		</location>
		<location id="id9" x="-85" y="-561">
			<name x="-144" y="-578">Failure</name>
		</location>
		<location id="id10" x="237" y="-561">
			<name x="254" y="-586">Success</name>
		</location>
		<location id="id11" x="-85" y="-459">
		</location>
		<location id="id12" x="-459" y="-629">
		</location>
		<location id="id13" x="-85" y="-629">
		</location>
		<location id="id14" x="152" y="-629">
		</location>
		<location id="id15" x="237" y="-459">
		</location>
		<location id="id16" x="-459" y="-535">
		</location>
		<location id="id17" x="-459" y="-459">
		</location>
		<location id="id18" x="-85" y="-289">
		</location>
		<location id="id19" x="51" y="-187">
		</location>
		<location id="id20" x="238" y="-357">
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id20"/>
			<target ref="id15"/>
			<label kind="assignment" x="246" y="-416">finalJumpToRomExt()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="68" y="-161">CheckSignature!</label>
			<label kind="assignment" x="68" y="-144">GlobalSignature = currentManifest.signature</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id18"/>
			<label kind="guard" x="-76" y="-340">checkRomExtManifest()</label>
			<label kind="assignment" x="-76" y="-323">readPublicKey()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-399" y="-527">REMTTReturn?</label>
			<label kind="assignment" x="-399" y="-510">romExtsManifests = GlobalRomExtsManifests,
clearGlobalRomExtsManifests()</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-544" y="-527">REMTTCall!</label>
			<label kind="assignment" x="-646" y="-510">GlobalBootPolicy = bootPolicy</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id11"/>
			<label kind="guard" x="76" y="-484">false</label>
			<label kind="assignment" x="126" y="-484">loopIndex++</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id20"/>
			<label kind="assignment" x="255" y="-314">pmpUnlockRomExt()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="255" y="-510">RomExtStart[entryPoint]!</label>
			<nail x="237" y="-501"/>
			<nail x="237" y="-510"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="255" y="-229">SignatureValid?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="93" y="-289">SignatureNotValid?</label>
			<label kind="assignment" x="134" y="-306">loopIndex++</label>
			<nail x="220" y="-204"/>
			<nail x="221" y="-238"/>
			<nail x="204" y="-255"/>
			<nail x="221" y="-272"/>
			<nail x="221" y="-340"/>
			<nail x="204" y="-357"/>
			<nail x="221" y="-374"/>
			<nail x="220" y="-425"/>
			<nail x="203" y="-442"/>
			<nail x="-68" y="-442"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-67" y="-204">PubKeyValid?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-424" y="-204">PubKeyNotValid?</label>
			<label kind="assignment" x="-424" y="-187">loopIndex++</label>
			<nail x="-442" y="-187"/>
			<nail x="-442" y="-442"/>
			<nail x="-102" y="-442"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-255" y="-272">CheckPublicKeyValidCall!</label>
			<label kind="assignment" x="-238" y="-255">GlobalPublicKey = key</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="guard" x="-59" y="-416">!checkRomExtManifest()</label>
			<label kind="assignment" x="-59" y="-399">loopIndex++</label>
			<nail x="-68" y="-408"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="-323" y="-416">loopIndex &lt; NumberOfFlashBanks</label>
			<label kind="assignment" x="-493" y="-399">currentManifest = romExtsManifests.rom_exts_mfs[loopIndex]</label>
			<nail x="-102" y="-408"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="guard" x="-76" y="-535">loopIndex &gt;= NumberOfFlashBanks</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="assignment" x="-595" y="-612">readBootPolicy(),
clearGlobalMemory()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-263" y="-654">ReadMemory[21][30]!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-59" y="-654">StartRomStage?</label>
		</transition>
	</template>
	<template>
		<name>RomExt</name>
		<parameter>const int[34,34] id</parameter>
		<location id="id21" x="-161" y="-153">
		</location>
		<location id="id22" x="-357" y="-153">
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-339" y="-170">RomExtStart[id]?</label>
		</transition>
	</template>
	<template>
		<name>rom_ext_manifests_to_try</name>
		<declaration>boot_policy_t bootPolicy;
rom_ext_manifest_t manifests[NumberOfFlashBanks];
int loopIndex = 0;

void makeManifest(){
    rom_ext_manifest_t manifest;
    // The fields are filled out pretty randomly -.-
    int i;
    manifest.identifier = GlobalMemory[0];
    manifest.entryPoint = GlobalMemory[1];
    manifest.signature = GlobalMemory[2];
    for(i = 0; i &lt; 10; i++){
        manifest.pub_signature_key.key[i] = GlobalMemory[3];
        manifest.image_code[i] = GlobalMemory[4];
    }
    manifests[loopIndex] = manifest;
}

void returnManifests(){
    int i;
    GlobalRomExtsManifests.size = NumberOfFlashBanks;
    GlobalRomExtsManifests.rom_exts_mfs = manifests;
}


/*
    int identifier;
    int entryPoint; //address in memory
    int signature;
    pub_key_t pub_signature_key;
    int image_code[10];
*/
</declaration>
		<location id="id23" x="901" y="-391">
		</location>
		<location id="id24" x="799" y="-391">
		</location>
		<location id="id25" x="697" y="-391">
		</location>
		<init ref="id25"/>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="595" y="-348">loopIndex &gt;= NumberOfFlashBanks</label>
			<label kind="synchronisation" x="595" y="-331">REMTTReturn!</label>
			<label kind="assignment" x="595" y="-314">returnManifests()</label>
			<nail x="748" y="-340"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="assignment" x="850" y="-340">makeManifest(),
loopIndex++,
clearGlobalMemory()</label>
			<nail x="850" y="-340"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="816" y="-467">loopIndex &lt; NumberOfFlashBanks</label>
			<label kind="synchronisation" x="807" y="-493">ReadMemory[bootPolicy.rom_ext_slot[loopIndex]][bootPolicy.rom_ext_slot[loopIndex] + 5]!</label>
			<nail x="850" y="-442"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="594" y="-501">REMTTCall?</label>
			<label kind="assignment" x="586" y="-484">bootPolicy = GlobalBootPolicy,
clearGlobalBootPolicy()</label>
			<nail x="748" y="-442"/>
		</transition>
	</template>
	<template>
		<name>CheckPubKeyValid</name>
		<declaration>void CheckPublicKey(){
    GlobalBool = GlobalPublicKey.key[0] != 0;
}</declaration>
		<location id="id26" x="-289" y="-289">
		</location>
		<location id="id27" x="-527" y="-289">
		</location>
		<init ref="id27"/>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-476" y="-382">!GlobalBool</label>
			<label kind="synchronisation" x="-476" y="-365">PubKeyNotValid!</label>
			<nail x="-289" y="-340"/>
			<nail x="-527" y="-340"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-476" y="-263">GlobalBool</label>
			<label kind="synchronisation" x="-476" y="-238">PubKeyValid!</label>
			<nail x="-289" y="-238"/>
			<nail x="-527" y="-238"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-476" y="-314">CheckPublicKeyValidCall?</label>
			<label kind="assignment" x="-476" y="-289">CheckPublicKey()</label>
		</transition>
	</template>
	<template>
		<name>RSAModule</name>
		<declaration>const int MagicValue = 3;
int signature;

bool checkSignature(){
    return signature == 3;
}</declaration>
		<location id="id28" x="-799" y="-221">
		</location>
		<location id="id29" x="-527" y="-221">
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-731" y="-221">CheckSignature?</label>
			<label kind="assignment" x="-731" y="-263">signature = GlobalSignature,
GlobalSignature = 0</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-714" y="-314">!checkSignature()</label>
			<label kind="synchronisation" x="-714" y="-297">SignatureNotValid!</label>
			<nail x="-527" y="-272"/>
			<nail x="-799" y="-272"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-731" y="-170">checkSignature()</label>
			<label kind="synchronisation" x="-731" y="-153">SignatureValid!</label>
			<nail x="-527" y="-170"/>
			<nail x="-799" y="-170"/>
		</transition>
	</template>
	<system>system SystemReset, ROMStage, Memory, rom_ext_manifests_to_try, CheckPubKeyValid, 
       RSAModule, RomExt;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
