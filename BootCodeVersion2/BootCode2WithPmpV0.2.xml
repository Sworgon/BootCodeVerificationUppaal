<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Når man tænder, er hele flash read-only og locked.
// Når man har verificeret noget, "åbner" man en region gennem PMP, så det kan eksekveres.
/*
TEST PURPOSE KEY PAIR:
Private Key: (143, 103)
Public Key: (143, 7)
Primes: p = 11, q = 13
Totient = 120
*/
const int MemoryMaxIndex = 100;
const int NumberOfFlashBanks = 2;



typedef struct{
    int identifier;
    int rom_ext_slot[NumberOfFlashBanks]; // Address of Flash Bank
    
    //what to do if all ROM Ext are invalid
    //void (*fail) ();    
    int fail_function_address;

    //what to do if the ROM Ext unexpectedly returns
    //void (*fail_rom_ext_terminated) (rom_ext_manifest_t);   
    int rom_ext_failure_function_address;
} boot_policy_t;

typedef struct {
    int exponent;
    int modulus;
} pub_key_t;

typedef struct {
    int exponent;
    int modulus;
} sig_key_t;

typedef struct {
    int identifier;
    int entryPoint; //address in memory
    int signature;
    pub_key_t pub_signature_key;
    int image_code[10];
} rom_ext_manifest_t;

typedef struct {
    int size;
    rom_ext_manifest_t rom_exts_mfs[NumberOfFlashBanks];
} rom_exts_manifests_t;

typedef struct{
    int startAddress;
    int endAddress;
    bool read;
    bool write;
    bool execute;
    bool locked;
} PmpRegion_t;

PmpRegion_t PmpRegions[16];

int GlobalMemory[MemoryMaxIndex];
boot_policy_t GlobalBootPolicy;
rom_exts_manifests_t GlobalRomExtsManifests;
pub_key_t GlobalPublicKey;
bool GlobalBool;
int GlobalSignature;
rom_ext_manifest_t GlobalManifest;


broadcast chan PowerOnBC;
chan StartRomStage;

chan ReadMemory[MemoryMaxIndex][MemoryMaxIndex];
chan WriteMemory[MemoryMaxIndex][MemoryMaxIndex];
chan ExecuteMemory[MemoryMaxIndex][MemoryMaxIndex];

chan REMTTCall, // Rom Ext Manifests To Try
     REMTTReturn;

chan PmpWriteMemory[MemoryMaxIndex][MemoryMaxIndex],
     PmpReadMemory[MemoryMaxIndex][MemoryMaxIndex];

chan FinalJumpCall,
     FinalJumpReturn;

chan Rom_Ext_Fail;

broadcast chan CheckPublicKeyValidCallBC,
               PubKeyNotValidBC,
               PubKeyValidBC;

broadcast chan CheckSignatureBC,
               SignatureValidBC,
               SignatureNotValidBC;

broadcast chan RomExtValidBC[MemoryMaxIndex],
               RomExtNotValidBC;

chan RomExtStart[MemoryMaxIndex];

void clearGlobalMemory(){
    int i;
    for(i = 0; i &lt; MemoryMaxIndex; i++)
        GlobalMemory[i] = 0;
}

void clearGlobalBootPolicy(){
    int i;
    GlobalBootPolicy.identifier = 0;
    for(i = 0; i &lt; NumberOfFlashBanks; i++)
        GlobalBootPolicy.rom_ext_slot[i] = 0; 
    GlobalBootPolicy.fail_function_address = 0;  
    GlobalBootPolicy.rom_ext_failure_function_address = 0;
}

void clearGlobalRomExtsManifests(){
    int i, j;
    GlobalRomExtsManifests.size = 0;
    for(i = 0; i &lt; NumberOfFlashBanks; i++){
        GlobalRomExtsManifests.rom_exts_mfs[i].identifier = 0;
        GlobalRomExtsManifests.rom_exts_mfs[i].entryPoint = 0;
        GlobalRomExtsManifests.rom_exts_mfs[i].signature = 0;
        for(j = 0; j &lt; 10; j++){
            GlobalRomExtsManifests.rom_exts_mfs[i].pub_signature_key.modulus = 0;
            GlobalRomExtsManifests.rom_exts_mfs[i].pub_signature_key.exponent = 0;
            GlobalRomExtsManifests.rom_exts_mfs[i].image_code[j] = 0;
        }
    }
}

void clearGlobalManifest(){
    int i;
    GlobalManifest.identifier = 0;
    GlobalManifest.entryPoint = 0;
    GlobalManifest.signature = 0;
    GlobalManifest.pub_signature_key.modulus = 0;
    GlobalManifest.pub_signature_key.modulus = 0;

    for(i = 0; i &lt; 10; i++){          
            GlobalManifest.image_code[i] = 0;
        }
}
</declaration>
	<template>
		<name>SystemReset</name>
		<location id="id0" x="187" y="-51">
		</location>
		<location id="id1" x="51" y="-51">
		</location>
		<location id="id2" x="-51" y="-51">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="59" y="-76">StartRomStage!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-34" y="-76">PowerOnBC!</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Memory</name>
		<declaration>int memory[MemoryMaxIndex];
// 0-19 ROM
// 20-29 Flash Info
// 30-64 Flash Bank 0
// 65-99 Flash Bank 1
/*
Flash Bank has size 35. 
The 12 first indexes are for manifest of following structure:
0: Identifier
1: Signature
2-7: Public Key
8-11: Image Code
*/
rom_exts_manifests_t manifests;

void initializeMemory(){
    int i, j;
    rom_ext_manifest_t tempManifest;
    for(i = 0; i &lt; MemoryMaxIndex; i++)
        memory[i] = i;

//Create manifest for Flash Banks
    for(i = 0; i &lt; NumberOfFlashBanks; i++){
        tempManifest.identifier = 30 + (35 * i);
        tempManifest.entryPoint = 38 + (35 * i);
        tempManifest.signature = 31 + (35 * i);
        //modulus and exponent taken from example. i is added to subsequent manifests' keys to make keys invalid. This tests that keys are checked correctly.
        tempManifest.pub_signature_key.modulus = 143 + i;
        tempManifest.pub_signature_key.exponent = 7 + i;
        for(j = 0; j &lt; 10; j++){
            tempManifest.image_code[j] = (38 + (35 * i) + j % 4);         
        }
        
        manifests.rom_exts_mfs[i] = tempManifest;
    }
}



void readMemory(int startIndex, int endIndex){
    if(startIndex &gt;= 0 &amp;&amp; endIndex &lt;= 19){
        //Something from ROM
    }
    if(startIndex &gt;= 20 &amp;&amp; endIndex &lt;= 29){
        //Something from Flash Info
    }
    if(startIndex &gt;= 30 &amp;&amp; endIndex &lt;= 64){
        //Something from Flash Bank 0
        if(startIndex == 30 &amp;&amp; endIndex == 41){
            GlobalManifest = manifests.rom_exts_mfs[0];
        }

    }
    if(startIndex &gt;= 65 &amp;&amp; endIndex &lt;= 99){
        //Something from Flash Bank 1
        if(startIndex == 65 &amp;&amp; endIndex == 76){
            GlobalManifest = manifests.rom_exts_mfs[1];
        }
    }
    else{
        //You fucked up
    }
}

/*

void readMemory(v){
    int i;
    for(i = 0; i &lt;= endIndex - startIndex; i++){
        GlobalMemory[i] = memory[i + startIndex];
    }
}
*/
void writeMemory(int startIndex, int endIndex){

}

// Opdel flash bank 0-32 / 3 

// Lav en mapping til arrays af structs


</declaration>
		<location id="id3" x="-527" y="-459">
		</location>
		<location id="id4" x="-527" y="-629">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-467" y="-501">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="synchronisation" x="-467" y="-467">PmpWriteMemory[s][e]?</label>
			<label kind="assignment" x="-467" y="-450">writeMemory(s,e)</label>
			<nail x="-476" y="-476"/>
			<nail x="-476" y="-442"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-782" y="-501">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="synchronisation" x="-782" y="-467">PmpReadMemory[s][e]?</label>
			<label kind="assignment" x="-782" y="-450">readMemory(s,e)</label>
			<nail x="-578" y="-476"/>
			<nail x="-578" y="-442"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-637" y="-586">PowerOnBC?</label>
			<label kind="assignment" x="-637" y="-569">initializeMemory()</label>
		</transition>
	</template>
	<template>
		<name>ROMStage</name>
		<declaration>boot_policy_t bootPolicy;
rom_exts_manifests_t romExtsManifests;
rom_ext_manifest_t currentManifest;
int loopIndex = 0;
pub_key_t key;
int entryPoint;

void readBootPolicy(){
    bootPolicy.identifier = GlobalMemory[0];
    bootPolicy.rom_ext_slot[0] = 30; // Address of flash bank 0.
    bootPolicy.rom_ext_slot[1] = 65; // Address of flash bank 1.
    bootPolicy.fail_function_address = GlobalMemory[1];
    bootPolicy.rom_ext_failure_function_address = GlobalMemory[2];
}

bool checkRomExtManifest(){
    return currentManifest.identifier != 0;
}

void readPublicKey(){
    key = currentManifest.pub_signature_key;
}

void pmpUnlockRomExt(){
    PmpRegions[0].startAddress = bootPolicy.rom_ext_slot[loopIndex] + 3; // Det er den sidste del af manifestet (31-35)
    PmpRegions[0].endAddress = bootPolicy.rom_ext_slot[loopIndex] + 4;
    PmpRegions[0].locked = true;
    PmpRegions[0].read = true;
    PmpRegions[0].execute = true;
    PmpRegions[0].write = false;    
}

void finalJumpToRomExt(){
    entryPoint = 34;
}

</declaration>
		<location id="id5" x="238" y="-561">
			<name x="255" y="-578">Rom_Ext_terminated</name>
		</location>
		<location id="id6" x="238" y="-425">
		</location>
		<location id="id7" x="238" y="-255">
		</location>
		<location id="id8" x="238" y="-187">
		</location>
		<location id="id9" x="-85" y="-187">
		</location>
		<location id="id10" x="-85" y="-357">
		</location>
		<location id="id11" x="-85" y="-561">
			<name x="-178" y="-569">Boot_Failed</name>
		</location>
		<location id="id12" x="-85" y="-459">
		</location>
		<location id="id13" x="-459" y="-629">
		</location>
		<location id="id14" x="-85" y="-629">
		</location>
		<location id="id15" x="152" y="-629">
		</location>
		<location id="id16" x="-459" y="-535">
		</location>
		<location id="id17" x="-459" y="-459">
		</location>
		<location id="id18" x="-85" y="-272">
		</location>
		<location id="id19" x="51" y="-187">
		</location>
		<location id="id20" x="238" y="-348">
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="246" y="-510">FinalJumpReturn?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="255" y="-399">FinalJumpCall!</label>
			<label kind="assignment" x="255" y="-382">GlobalManifest = currentManifest</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="68" y="-161">CheckSignatureBC!</label>
			<label kind="assignment" x="68" y="-144">GlobalSignature = currentManifest.signature</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id18"/>
			<label kind="guard" x="-76" y="-323">checkRomExtManifest()</label>
			<label kind="synchronisation" x="-76" y="-340">RomExtValidBC[currentManifest.identifier]!</label>
			<label kind="assignment" x="-76" y="-306">readPublicKey()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-399" y="-527">REMTTReturn?</label>
			<label kind="assignment" x="-399" y="-510">romExtsManifests = GlobalRomExtsManifests,
clearGlobalRomExtsManifests()</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-544" y="-527">REMTTCall!</label>
			<label kind="assignment" x="-646" y="-510">GlobalBootPolicy = bootPolicy</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id20"/>
			<label kind="assignment" x="255" y="-314">pmpUnlockRomExt()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="255" y="-229">SignatureValidBC?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="93" y="-289">SignatureNotValidBC?</label>
			<label kind="assignment" x="134" y="-306">loopIndex++</label>
			<nail x="220" y="-204"/>
			<nail x="221" y="-238"/>
			<nail x="204" y="-255"/>
			<nail x="221" y="-272"/>
			<nail x="221" y="-340"/>
			<nail x="204" y="-357"/>
			<nail x="221" y="-374"/>
			<nail x="221" y="-408"/>
			<nail x="204" y="-425"/>
			<nail x="221" y="-442"/>
			<nail x="221" y="-459"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-67" y="-204">PubKeyValidBC?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-424" y="-204">PubKeyNotValidBC?</label>
			<label kind="assignment" x="-424" y="-187">loopIndex++</label>
			<nail x="-459" y="-187"/>
			<nail x="-459" y="-425"/>
			<nail x="-442" y="-425"/>
			<nail x="-442" y="-442"/>
			<nail x="-102" y="-442"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-263" y="-255">CheckPublicKeyValidCallBC!</label>
			<label kind="assignment" x="-246" y="-238">GlobalPublicKey = key</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-59" y="-416">!checkRomExtManifest()</label>
			<label kind="synchronisation" x="-59" y="-399">RomExtNotValidBC!</label>
			<label kind="assignment" x="-59" y="-382">loopIndex++</label>
			<nail x="-68" y="-408"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="guard" x="-323" y="-416">loopIndex &lt; NumberOfFlashBanks</label>
			<label kind="assignment" x="-493" y="-399">currentManifest = romExtsManifests.rom_exts_mfs[loopIndex]</label>
			<nail x="-102" y="-408"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-76" y="-535">loopIndex &gt;= NumberOfFlashBanks</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="assignment" x="-595" y="-612">readBootPolicy(),
clearGlobalMemory()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-263" y="-654">ReadMemory[20][29]!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-59" y="-654">StartRomStage?</label>
		</transition>
	</template>
	<template>
		<name>Zeno</name>
		<location id="id21" x="-17" y="-17">
			<urgent/>
		</location>
		<init ref="id21"/>
	</template>
	<template>
		<name>RomExt</name>
		<parameter>const int[34,34] id</parameter>
		<location id="id22" x="-187" y="-153">
		</location>
		<location id="id23" x="-357" y="-153">
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-339" y="-170">RomExtStart[id]?</label>
		</transition>
	</template>
	<template>
		<name>rom_ext_manifests_to_try</name>
		<declaration>boot_policy_t bootPolicy;
rom_ext_manifest_t manifests[NumberOfFlashBanks];
int loopIndex = 0;
int startReadIndex, endReadIndex;

/*
void makeManifest(){
    rom_ext_manifest_t manifest;
    // The fields are filled out pretty randomly -.-
    int i;
    manifest.identifier = GlobalMemory[0];
    manifest.entryPoint = GlobalMemory[3]; //34, 69
    manifest.signature = GlobalMemory[2];
    for(i = 0; i &lt; 10; i++){
        manifest.pub_signature_key.key[i] = GlobalMemory[3];
        manifest.image_code[i] = GlobalMemory[4];
    }
    manifests[loopIndex] = manifest;
}
*/

//ReadMemory[bootPolicy.rom_ext_slot[loopIndex] + (35 * loopIndex)][bootPolicy.rom_ext_slot[loopIndex] + 11 + (35 * loopIndex)]!
void setReadIndices(){
    if(loopIndex &lt; NumberOfFlashBanks){
        startReadIndex = bootPolicy.rom_ext_slot[loopIndex];
        endReadIndex = bootPolicy.rom_ext_slot[loopIndex] + 11;
    }
}

void makeManifest(){
    manifests[loopIndex] = GlobalManifest;
}


void returnManifests(){
    int i;
    GlobalRomExtsManifests.size = NumberOfFlashBanks;
    GlobalRomExtsManifests.rom_exts_mfs = manifests;
}


/*
    int identifier;
    int entryPoint; //address in memory
    int signature;
    pub_key_t pub_signature_key;
    int image_code[10];
*/
</declaration>
		<location id="id24" x="714" y="-289">
		</location>
		<location id="id25" x="612" y="-289">
		</location>
		<location id="id26" x="510" y="-289">
		</location>
		<init ref="id26"/>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="365" y="-238">loopIndex &gt;= NumberOfFlashBanks</label>
			<label kind="synchronisation" x="365" y="-221">REMTTReturn!</label>
			<label kind="assignment" x="365" y="-204">returnManifests()</label>
			<nail x="561" y="-238"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="assignment" x="637" y="-238">makeManifest(),
clearGlobalManifest(),
loopIndex++,
setReadIndices()</label>
			<nail x="663" y="-238"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="620" y="-365">loopIndex &lt; NumberOfFlashBanks</label>
			<label kind="synchronisation" x="620" y="-382">ReadMemory[startReadIndex][endReadIndex]!</label>
			<nail x="663" y="-340"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="407" y="-399">REMTTCall?</label>
			<label kind="assignment" x="399" y="-382">bootPolicy = GlobalBootPolicy,
clearGlobalBootPolicy(),
setReadIndices()</label>
			<nail x="561" y="-340"/>
		</transition>
	</template>
	<template>
		<name>final_jump_to_rom_ext</name>
		<declaration>rom_ext_manifest_t currentManifest;</declaration>
		<location id="id27" x="-408" y="-391">
		</location>
		<location id="id28" x="-255" y="-391">
		</location>
		<location id="id29" x="-102" y="-391">
			<name x="-85" y="-391">ROM_ext_running</name>
		</location>
		<location id="id30" x="-102" y="-289">
		</location>
		<location id="id31" x="-595" y="-289">
		</location>
		<location id="id32" x="-850" y="-289">
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-382" y="-416">FinalJumpReturn!</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-221" y="-416">Rom_Ext_Fail?</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-93" y="-348">RomExtStart[currentManifest.entryPoint]!</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-578" y="-314">ExecuteMemory[currentManifest.entryPoint][currentManifest.entryPoint]!</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-833" y="-348">FinalJumpCall?</label>
			<label kind="assignment" x="-833" y="-331">currentManifest = GlobalManifest,
clearGlobalManifest()</label>
		</transition>
	</template>
	<template>
		<name>CheckPubKeyValid</name>
		<declaration>void CheckPublicKey(){
    //GlobalBool = GlobalPublicKey.key[0] != 0;
    int i;
    int numToCheck = GlobalPublicKey.exponent;
    GlobalBool = numToCheck != 1;
    for(i = 2; i &lt; numToCheck; i++) {
        if((numToCheck % i) == 0) {
            GlobalBool = false;
            return;            
        }
    }
}</declaration>
		<location id="id33" x="-289" y="-289">
		</location>
		<location id="id34" x="-527" y="-289">
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="-476" y="-382">!GlobalBool</label>
			<label kind="synchronisation" x="-476" y="-365">PubKeyNotValidBC!</label>
			<nail x="-289" y="-340"/>
			<nail x="-527" y="-340"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="-476" y="-263">GlobalBool</label>
			<label kind="synchronisation" x="-476" y="-238">PubKeyValidBC!</label>
			<nail x="-289" y="-238"/>
			<nail x="-527" y="-238"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-476" y="-314">CheckPublicKeyValidCallBC?</label>
			<label kind="assignment" x="-476" y="-289">CheckPublicKey()</label>
		</transition>
	</template>
	<template>
		<name>RSAModule</name>
		<declaration>const int MagicValue = 31;
int signature;

bool checkSignature(){
    return signature == MagicValue;
}</declaration>
		<location id="id35" x="-799" y="-221">
		</location>
		<location id="id36" x="-527" y="-221">
		</location>
		<init ref="id35"/>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-731" y="-221">CheckSignatureBC?</label>
			<label kind="assignment" x="-731" y="-263">signature = GlobalSignature</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-714" y="-314">!checkSignature()</label>
			<label kind="synchronisation" x="-714" y="-297">SignatureNotValidBC!</label>
			<nail x="-527" y="-272"/>
			<nail x="-799" y="-272"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-731" y="-170">checkSignature()</label>
			<label kind="synchronisation" x="-731" y="-153">SignatureValidBC!</label>
			<nail x="-527" y="-170"/>
			<nail x="-799" y="-170"/>
		</transition>
	</template>
	<template>
		<name>ValidityCheckObserver</name>
		<declaration>//Fix guards in accordance to new key make up</declaration>
		<location id="id37" x="391" y="-51">
			<name x="381" y="-85">Success</name>
		</location>
		<location id="id38" x="187" y="-51">
		</location>
		<location id="id39" x="-51" y="-51">
		</location>
		<location id="id40" x="-289" y="-51">
		</location>
		<location id="id41" x="-51" y="51">
			<committed/>
		</location>
		<init ref="id40"/>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<nail x="-289" y="51"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id41"/>
			<label kind="guard" x="-25" y="8">GlobalSignature != 33</label>
			<label kind="synchronisation" x="-25" y="25">SignatureNotValidBC?</label>
			<nail x="187" y="51"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-229" y="0">PubKeyNotValidBC?</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id37"/>
			<label kind="guard" x="205" y="-85">GlobalSignature == 33</label>
			<label kind="synchronisation" x="204" y="-102">SignatureValidBC?</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-25" y="-76">PubKeyValidBC?</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="select" x="-263" y="-127">e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-263" y="-110">e != 0</label>
			<label kind="synchronisation" x="-263" y="-93">RomExtValidBC[e]?</label>
		</transition>
	</template>
	<template>
		<name>PmpModule</name>
		<declaration>int start, end;

void initializePmp(){
    PmpRegions[15].startAddress = 0;
    PmpRegions[15].endAddress = MemoryMaxIndex;
    PmpRegions[15].write = false;
    PmpRegions[15].read = true;
    PmpRegions[15].execute = false;
    PmpRegions[15].locked = true;
}
bool canRead(int startIndex, int endIndex){
    int i;
    for(i = 0; i &lt; 16;i++)
        if (PmpRegions[i].startAddress &lt;= startIndex &amp;&amp; PmpRegions[i].endAddress &gt;= endIndex)
            if (PmpRegions[i].read)
                return true;
    return false;
}

bool canWrite(int startIndex, int endIndex){
    int i;
    for(i = 0; i &lt; 16;i++)
        if (PmpRegions[i].startAddress &lt;= startIndex &amp;&amp; PmpRegions[i].endAddress &gt;= endIndex)
            if (PmpRegions[i].write)
                return true;
    return false;
}

bool canExecute(int startIndex, int endIndex){
    int i;
    for(i = 0; i &lt; 16;i++)
        if (PmpRegions[i].startAddress &lt;= startIndex &amp;&amp; PmpRegions[i].endAddress &gt;= endIndex)
            if (PmpRegions[i].execute)
                return true;
    return false;
}</declaration>
		<location id="id42" x="-204" y="-340">
		</location>
		<location id="id43" x="-136" y="-510">
		</location>
		<location id="id44" x="-34" y="-340">
			<committed/>
		</location>
		<location id="id45" x="-382" y="-340">
			<committed/>
		</location>
		<init ref="id43"/>
		<transition>
			<source ref="id45"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-493" y="-297">PmpReadMemory[start][end]!</label>
			<label kind="assignment" x="-493" y="-280">start = 0,
end = 0</label>
			<nail x="-382" y="-306"/>
			<nail x="-238" y="-306"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-51" y="-297">PmpWriteMemory[start][end]!</label>
			<label kind="assignment" x="-51" y="-280">start = 0,
end = 0</label>
			<nail x="-34" y="-306"/>
			<nail x="-170" y="-306"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id42"/>
			<label kind="select" x="-272" y="-238">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-272" y="-204">canExecute(s,e)</label>
			<label kind="synchronisation" x="-272" y="-187">ExecuteMemory[s][e]?</label>
			<nail x="-221" y="-272"/>
			<nail x="-187" y="-272"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id44"/>
			<label kind="select" x="-17" y="-450">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-17" y="-416">canWrite(s,e)</label>
			<label kind="synchronisation" x="-17" y="-399">WriteMemory[s][e]?</label>
			<label kind="assignment" x="-17" y="-382">start = s,
end = e</label>
			<nail x="-178" y="-374"/>
			<nail x="-34" y="-374"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id45"/>
			<label kind="select" x="-484" y="-459">s : int[0,MemoryMaxIndex - 1],
e : int[0,MemoryMaxIndex - 1]</label>
			<label kind="guard" x="-484" y="-425">canRead(s, e)</label>
			<label kind="synchronisation" x="-484" y="-408">ReadMemory[s][e]?</label>
			<label kind="assignment" x="-484" y="-391">start = s,
end = e</label>
			<nail x="-238" y="-374"/>
			<nail x="-382" y="-374"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-238" y="-501">PowerOnBC?</label>
			<label kind="assignment" x="-238" y="-484">initializePmp()</label>
			<nail x="-238" y="-510"/>
			<nail x="-238" y="-442"/>
			<nail x="-136" y="-442"/>
			<nail x="-136" y="-408"/>
			<nail x="-204" y="-408"/>
		</transition>
	</template>
	<system>system SystemReset, ROMStage, Memory, rom_ext_manifests_to_try, CheckPubKeyValid, 
       RSAModule, RomExt, PmpModule, Zeno, final_jump_to_rom_ext;
    </system>
	<queries>
		<query>
			<formula>A[] ROMStage.ReadyToRunRomExt imply (PmpRegions[0].execute &amp;&amp; PmpRegions[0].startAddress &lt;= ROMStage.entryPoint &amp;&amp; PmpRegions[0].endAddress &gt;= ROMStage.entryPoint)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>ValidityCheckObserver.Success --&gt; ROMStage.Failure</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ROMStage.Success imply ValidityCheckObserver.Success</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
